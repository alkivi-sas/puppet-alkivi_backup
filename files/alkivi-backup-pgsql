#!/usr/bin/env bash

. /etc/alkivi.conf.d/backup-pgsql.conf

PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/postgres/bin:/usr/local/pgsql/bin
DATE=`date +%Y-%m-%d`				# Datestamp e.g 2002-09-21
DOW=`date +%A`					# Day of the week e.g. Monday
DNOW=`date +%u`					# Day number of the week 1 to 7 where 1 represents Monday
DOM=`date +%d`					# Date of the Month e.g. 27
M=`date +%B`					# Month e.g January
W=`date +%V`					# Week Number e.g 37
VER=1.0						# Version Number
LOGFILE="${BACKUPDIR}/${DBHOST}-`date +%N`.log"	# Logfile Name
LOGERR="${BACKUPDIR}/ERRORS_${DBHOST}-`date +%N`.log" # error filename
OPT=""						# OPT string for use with mysqldump ( see man mysqldump )
BACKUPFILES=""					# thh: added for later mailing

# Create required directories
if [[ ! -e "$BACKUPDIR" ]]; then
    mkdir -p "$BACKUPDIR"
fi

if [[ ! -e "$BACKUPDIR/daily" ]];then		# Check Daily Directory exists.
    mkdir -p "$BACKUPDIR/daily"
fi

if [[ ! -e "$BACKUPDIR/weekly" ]];then		# Check Weekly Directory exists.
    mkdir -p "$BACKUPDIR/weekly"
fi

if [[ ! -e "$BACKUPDIR/monthly" ]];then	# Check Monthly Directory exists.
    mkdir -p "$BACKUPDIR/monthly"
fi

# Functions

# @info:	Save stdout and stderr
# @deps:	(none)
activateIO() {
    ###################################################################################
    # IO redirection for logging.
    # $1 = $LOGFILE, $2 = $LOGERR

    #(( $CONFIG_debug )) || {
    touch "$LOGFILE"
    exec 6>&1				# Link file descriptor #6 with stdout. Saves stdout.
    exec > "$LOGFILE"		# stdout replaced with file $LOGFILE.

    touch "$LOGERR"
    exec 7>&2				# Link file descriptor #7 with stderr. Saves stderr.
    exec 2> "$LOGERR"	# stderr replaced with file $LOGERR.
    #}
}

# @info:	Restore stdout and stderr redirections.
# @deps:	(none)
removeIO() {
    exec 1>&6 6>&-      # Restore stdout and close file descriptor #6.
    exec 2>&7 7>&-      # Restore stdout and close file descriptor #7.
}

# Database dump function
dbdump () {
    pg_dump --username=$USERNAME $HOST $OPT $1 > $2
    return 0
}

# Compression function
SUFFIX=""
compression () {
    if [[ "$COMP" = "gzip" ]]; then
        gzip -f "$1"
        echo
        echo Backup Information for "$1"
        gzip -l "$1.gz"
        SUFFIX=".gz"
    elif [[ "$COMP" = "bzip2" ]]; then
        echo Compression information for "$1.bz2"
        bzip2 -f -v $1 2>&1
        SUFFIX=".bz2"
    else
        echo "No compression option set, check advanced settings"
    fi
    return 0
}

activateIO "$LOGFILE" "$LOGERR"

# Run command before we begin
if [[ "$PREBACKUP" ]];then
    echo ======================================================================
    echo "Prebackup command output."
    echo
    eval $PREBACKUP
    echo
    echo ======================================================================
    echo
fi


if [[ "$SEPDIR" = "yes" ]]; then # Check if CREATE DATABSE should be included in Dump
    if [[ "$CREATE_DATABASE" = "no" ]]; then
        OPT="$OPT"
    else
        OPT="$OPT --create"
    fi
else
    OPT="$OPT"
fi

# Hostname for LOG information
if [[ "$DBHOST" = "localhost" ]]; then
    DBHOST="`hostname -f`"
    HOST=""
else
    HOST="-h $DBHOST"
fi

# If backing up all DBs on the server
if [[ "$DBNAMES" = "all" ]]; then
    DBNAMES="`psql -U $USERNAME $HOST -l -A -F: | sed -ne "/:/ { /Name:Owner/d; /template0/d; s/:.*$//; p }"`"

    # If DBs are excluded
    for exclude in $DBEXCLUDE
    do
        DBNAMES=`echo $DBNAMES | sed "s/\b$exclude\b//g"`
    done

    MDBNAMES=$DBNAMES
fi

echo ======================================================================
echo AutoPostgreSQLBackup VER $VER
echo http://autopgsqlbackup.frozenpc.net/
echo 
echo Backup of Database Server - $DBHOST
echo ======================================================================

# Test is seperate DB backups are required
if [[ "$SEPDIR" = "yes" ]]; then
    echo Backup Start Time `date`
    echo ======================================================================
    # Monthly Full Backup of all Databases
    if [[ $DOM = "01" ]]; then
        for MDB in $MDBNAMES
        do

            # Prepare $DB for using
            MDB="`echo $MDB | sed 's/%/ /g'`"

            if [[ ! -e "$BACKUPDIR/monthly/$MDB" ]]		# Check Monthly DB Directory exists.
            then
                mkdir -p "$BACKUPDIR/monthly/$MDB"
            fi
            echo Monthly Backup of $MDB...
            dbdump "$MDB" "$BACKUPDIR/monthly/$MDB/${MDB}_$DATE.$M.$MDB.sql"
            compression "$BACKUPDIR/monthly/$MDB/${MDB}_$DATE.$M.$MDB.sql"
            BACKUPFILES="$BACKUPFILES $BACKUPDIR/monthly/$MDB/${MDB}_$DATE.$M.$MDB.sql$SUFFIX"
            echo ----------------------------------------------------------------------
        done
    fi

    for DB in $DBNAMES
    do
        # Prepare $DB for using
        DB="`echo $DB | sed 's/%/ /g'`"

        # Create Seperate directory for each DB
        if [[ ! -e "$BACKUPDIR/daily/$DB" ]]		# Check Daily DB Directory exists.
        then
            mkdir -p "$BACKUPDIR/daily/$DB"
        fi

        if [[ ! -e "$BACKUPDIR/weekly/$DB" ]]		# Check Weekly DB Directory exists.
        then
            mkdir -p "$BACKUPDIR/weekly/$DB"
        fi

        # Weekly Backup
        if [[ $DNOW = $DOWEEKLY ]]; then
            echo Weekly Backup of Database \( $DB \)
            echo Rotating 5 weeks Backups...
            if [[ "$W" -le 05 ]];then
                REMW=`expr 48 + $W`
            elif [[ "$W" -lt 15 ]];then
                REMW=0`expr $W - 5`
            else
                REMW=`expr $W - 5`
            fi
            eval rm -fv "$BACKUPDIR/weekly/$DB/week.$REMW.*" 
            echo
            dbdump "$DB" "$BACKUPDIR/weekly/$DB/${DB}_week.$W.$DATE.sql"
            compression "$BACKUPDIR/weekly/$DB/${DB}_week.$W.$DATE.sql"
            BACKUPFILES="$BACKUPFILES $BACKUPDIR/weekly/$DB/${DB}_week.$W.$DATE.sql$SUFFIX"
            echo ----------------------------------------------------------------------

            # Daily Backup
        else
            echo Daily Backup of Database \( $DB \)
            echo Rotating last weeks Backup...
            eval rm -fv "$BACKUPDIR/daily/$DB/*.$DOW.sql.*" 
            echo
            dbdump "$DB" "$BACKUPDIR/daily/$DB/${DB}_$DATE.$DOW.sql"
            compression "$BACKUPDIR/daily/$DB/${DB}_$DATE.$DOW.sql"
            BACKUPFILES="$BACKUPFILES $BACKUPDIR/daily/$DB/${DB}_$DATE.$DOW.sql$SUFFIX"
            echo ----------------------------------------------------------------------
        fi
    done
    echo Backup End `date`
    echo ======================================================================


else # One backup file for all DBs
    echo Backup Start `date`
    echo ======================================================================
    # Monthly Full Backup of all Databases
    if [[ $DOM = "01" ]]; then
        echo Monthly full Backup of \( $MDBNAMES \)...
        dbdump "$MDBNAMES" "$BACKUPDIR/monthly/$DATE.$M.all-databases.sql"
        compression "$BACKUPDIR/monthly/$DATE.$M.all-databases.sql"
        BACKUPFILES="$BACKUPFILES $BACKUPDIR/monthly/$DATE.$M.all-databases.sql$SUFFIX"
        echo ----------------------------------------------------------------------
    fi

    # Weekly Backup
    if [[ $DNOW = $DOWEEKLY ]]; then
        echo Weekly Backup of Databases \( $DBNAMES \)
        echo
        echo Rotating 5 weeks Backups...
        if [[ "$W" -le 05 ]];then
            REMW=`expr 48 + $W`
        elif [[ "$W" -lt 15 ]];then
            REMW=0`expr $W - 5`
        else
            REMW=`expr $W - 5`
        fi
        eval rm -fv "$BACKUPDIR/weekly/week.$REMW.*" 
        echo
        dbdump "$DBNAMES" "$BACKUPDIR/weekly/week.$W.$DATE.sql"
        compression "$BACKUPDIR/weekly/week.$W.$DATE.sql"
        BACKUPFILES="$BACKUPFILES $BACKUPDIR/weekly/week.$W.$DATE.sql$SUFFIX"
        echo ----------------------------------------------------------------------

        # Daily Backup
    else
        echo Daily Backup of Databases \( $DBNAMES \)
        echo
        echo Rotating last weeks Backup...
        eval rm -fv "$BACKUPDIR/daily/*.$DOW.sql.*" 
        echo
        dbdump "$DBNAMES" "$BACKUPDIR/daily/$DATE.$DOW.sql"
        compression "$BACKUPDIR/daily/$DATE.$DOW.sql"
        BACKUPFILES="$BACKUPFILES $BACKUPDIR/daily/$DATE.$DOW.sql$SUFFIX"
        echo ----------------------------------------------------------------------
    fi
    echo Backup End Time `date`
    echo ======================================================================
fi
echo Total disk space used for backup storage..
echo Size - Location
echo `du -hs "$BACKUPDIR"`
echo


# Run command when we're done
if [[ "$POSTBACKUP" ]]
then
    echo ======================================================================
    echo "Postbackup command output."
    echo
    eval $POSTBACKUP
    echo
    echo ======================================================================
fi

#Clean up IO redirection
removeIO


if [[ ! -e "$LOGFILE" && ! -e "$LOGERR" ]];then
    echo "Skipping normal output methods, since the program exited before any log files could be created."
else
    case "${MAILCONTENT}" in
        'files')
            #Get backup size
            ATTSIZE=`du -c $BACKUPFILES | grep "[[:digit:][:space:]]total$" |sed s/\s*total//`
            if [[ $MAXATTSIZE -ge $ATTSIZE ]]
            then
                BACKUPFILES=`echo "$BACKUPFILES" | sed -e "s# # -a #g"`	#enable multiple attachments
                mutt -s "PostgreSQL Backup Log and SQL Files for $DBHOST - $DATE" $BACKUPFILES $MAILADDR < $LOGFILE		#send via mutt
            else
                cat "$LOGFILE" | mail -s "WARNING! - PostgreSQL Backup exceeds set maximum attachment size on $HOST - $DATE" $MAILADDR
            fi
            ;;
        'log')
            cat "$LOGFILE" | mail -s "PostgreSQL Backup Log for $DBHOST - $DATE" $MAILADDR
            ;;
        'quiet')
            [[ -s "$LOGERR" ]] && cat "$LOGERR" | mail -s "ERRORS REPORTED: MySQL Backup error Log for ${HOST} - ${DATE}" ${MAILADDR}
            ;;
        *)
            if [[ -s "$LOGERR" ]]; then
                cat "$LOGFILE"
                echo
                echo "###### WARNING ######"
                echo "Errors reported during AutoMySQLBackup execution.. Backup failed"
                echo "Error log below.."
                cat "$LOGERR"
            else
                cat "$LOGFILE"
            fi
            ;;
    esac
fi

    # Clean up Logfile
    [[ -e "$LOGFILE" ]] && rm -f "$LOGFILE"
    [[ -e "$LOGERR" ]] && rm -f "$LOGERR"
    exit 0
